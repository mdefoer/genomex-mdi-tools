#!/usr/bin/perl
use strict;
use warnings;

#----------------------------------------------------------
# sequence retrieval from indexed reference genome (ideally resides in /dev/shm)
#----------------------------------------------------------

# constants
use constant {
    FAIDX_LENGTH => 0,
    FAIDX_OFFSET => 1,
    FAIDX_LINE_SEQ_LEN => 2,
    FAIDX_LINE_LEN => 3,
};

# working variables
my %faidx; # we keep the index
use vars qw($faH); # but each thread needs to open its own file handle

# load a genome index previously generated by samtools faidx
sub loadFaidx { 
    my ($faFile) = @_;
    open my $inH, "<", "$faFile.fai" or die "could not open $faFile.fai: $!\n";
    while (my $line = <$inH>){
        chomp $line;
        my ($chrom, $length, $offset, $lineSeqLen, $lineLen) = split("\t", $line);
        $faidx{$chrom} = [$length, $offset, $lineSeqLen, $lineLen];
    }
    close $inH;
}

# get chromosome lengths
sub getChromLength {
    my ($chrom) = @_;
    return $faidx{$chrom}[FAIDX_LENGTH];
}

# get a specified chunk of a single chromosome and rc if requested
sub getRefSeq { 
    my ($chrom, $pos1, $pos2, $rc) = @_;
    $pos1 > $pos2 and ($pos1, $pos2) = ($pos2, $pos1);
    $pos1 < 1 and $pos1 = 1;
    $pos2 > $faidx{$chrom}[FAIDX_LENGTH] and $pos2 = $faidx{$chrom}[FAIDX_LENGTH];
    $pos1--;
    $pos2--;
    my $linesBeforePos1 = int($pos1 / $faidx{$chrom}[FAIDX_LINE_SEQ_LEN]);    
    my $linesBeforePos2 = int($pos2 / $faidx{$chrom}[FAIDX_LINE_SEQ_LEN]);  
    seek $faH, $faidx{$chrom}[FAIDX_OFFSET] + $pos1 + $linesBeforePos1, 0; # accounts for newlines
    read $faH, my $seq, $pos2 - $pos1 + 1 + ($linesBeforePos2 - $linesBeforePos1);
    $seq =~ s/\s//g;
    $seq = uc($seq);
    $rc and rc(\$seq);
    return $seq; 
}

1;
